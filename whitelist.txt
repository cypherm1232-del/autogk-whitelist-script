-- Remote Whitelist System
-- Fetches whitelist from external source

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Your secret pastebin/GitHub raw URL (make this private!)
local WHITELIST_URL = "https://pastebin.com/raw/YOUR_SECRET_CODE"
-- Or use a private GitHub raw file URL

local whitelist = {}
local isLoaded = false

-- Function to load whitelist from remote source
local function loadWhitelist()
    local success, result = pcall(function()
        local response = HttpService:GetAsync(WHITELIST_URL)
        return HttpService:JSONDecode(response)
    end)
    
    if success and result then
        whitelist = result
        isLoaded = true
        print("Whitelist loaded successfully")
    else
        warn("Failed to load whitelist from remote source")
        -- Fallback whitelist (minimal)
        whitelist = {
            [123456789] = true  -- Your UserID as fallback
        }
        isLoaded = true
    end
end

-- Function to check if player is whitelisted
local function isWhitelisted(player)
    return whitelist[tostring(player.UserId)] == true or whitelist[player.UserId] == true
end

-- Load whitelist on script start
loadWhitelist()

-- Handle when players join
Players.PlayerAdded:Connect(function(player)
    -- Wait for whitelist to load
    while not isLoaded do
        wait(0.1)
    end
    
    if not isWhitelisted(player) then
        print(player.Name .. " (ID: " .. player.UserId .. ") is not whitelisted")
        player:Kick("Access denied. Contact administrator if you believe this is an error.")
    else
        print(player.Name .. " granted access")
    end
end)

-- Handle players already in server
spawn(function()
    while not isLoaded do
        wait(0.1)
    end
    
    for _, player in pairs(Players:GetPlayers()) do
        if not isWhitelisted(player) then
            player:Kick("Access denied. Contact administrator if you believe this is an error.")
        end
    end
end)